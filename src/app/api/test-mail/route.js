// src/app/api/test-mail/route.js
export const runtime = "nodejs";
export const dynamic = "force-dynamic";

import { NextResponse } from "next/server";
import { sendMail, verifySmtp } from "@/lib/email";

export async function GET() {
  try {
    // —Å–ø–µ—Ä—à—É –ø–æ–∫–∞–∂–µ–º–æ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è (–±–µ–∑ –ø–∞—Ä–æ–ª—ñ–≤)
    const diag = await verifySmtp();

    if (!diag.ok) {
      return NextResponse.json(
        {
          ok: false,
          step: "verify",
          hint: "Sprawd≈∫ EMAIL_USER (musi byƒá zweryfikowany w Brevo), EMAIL_PASS (SMTP key), port/secure.",
          diag,
          env: {
            host: process.env.EMAIL_HOST,
            port: process.env.EMAIL_PORT,
            user: process.env.EMAIL_USER,
            from: process.env.EMAIL_FROM,
          },
        },
        { status: 500 },
      );
    }

    // —è–∫—â–æ –≤–µ—Ä–∏—Ñ—ñ–∫–∞—Ü—ñ—è –ø—Ä–æ–π—à–ª–∞ ‚Äî –ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏
    const info = await sendMail({
      to: process.env.EMAIL_USER, // –ø–æ—à–ª–∏ —Å–∞–º —Å–æ–±—ñ
      subject: "‚úÖ Test Brevo SMTP",
      text: "Dzia≈Ça! ‚Äî Wiadomo≈õƒá testowa z proponujeprace.pl üíô",
    });

    return NextResponse.json({ ok: true, messageId: info?.messageId || null });
  } catch (e) {
    console.error("SMTP send error:", e);
    return NextResponse.json(
      {
        ok: false,
        step: "send",
        error: e?.message || String(e),
        meta: e?.meta || null,
      },
      { status: 500 },
    );
  }
}
