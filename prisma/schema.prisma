generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id           String   @id
  name         String
  ownerId      String
  website      String?
  logoUrl      String?
  verified     Boolean  @default(false)
  createdAt    DateTime @default(now())

  // üî¢ –∞–≥—Ä–µ–≥–∞—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥—É –∫–æ–º–ø–∞–Ω—ñ—ó (–ø—Ä–∞—Ü–µ–¥–∞–≤—Ü—è)
  ratingAvg    Float    @default(0)
  ratingCount  Int      @default(0)
  ratingSum    Int      @default(0)
  bayesScore   Float    @default(0)

  User         User     @relation(fields: [ownerId], references: [id])
  Job          Job[]

  // (–æ–ø—Ü—ñ–π–Ω–æ) —è–∫—â–æ —á–∞—Å—Ç–æ —Ñ—ñ–ª—å—Ç—Ä—É—î—à –ø–æ –≤–ª–∞—Å–Ω–∏–∫—É –∫–æ–º–ø–∞–Ω—ñ—ó
  // @@index([ownerId])
}

model Job {
  id          String   @id
  title       String
  description String
  city        String?
  isRemote    Boolean  @default(false)
  salaryMin   Int?
  salaryMax   Int?
  tagsCsv     String   @default("")
  status      String   @default("ACTIVE")
  companyId   String
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  // üî¢ –∞–≥—Ä–µ–≥–∞—Ç–∏ —Ä–µ–π—Ç–∏–Ω–≥—É –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è
  ratingAvg   Float    @default(0)
  ratingCount Int      @default(0)
  ratingSum   Int      @default(0)
  bayesScore  Float    @default(0)

  User        User     @relation(fields: [ownerId], references: [id])
  Company     Company  @relation(fields: [companyId], references: [id])

  @@index([ownerId])
  @@index([status])
  @@index([city])
  @@index([ownerId, createdAt])
  @@index([companyId])
}

model Review {
  id            String   @id
  authorId      String
  // targetType: "JOB" | "COMPANY" | "USER"  (–∑–∞–ª–∏—à–∞—î–º–æ String, —â–æ–± –Ω–µ –ª–∞–º–∞—Ç–∏ —ñ—Å–Ω—É—é—á—ñ –¥–∞–Ω—ñ)
  targetType    String
  targetId      String

  // üî¢ –æ—Å–Ω–æ–≤–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥ 1..5
  ratingOverall Int
  // üéØ –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –∞—Å–ø–µ–∫—Ç–∏ (–Ω–µ–æ–±–æ–≤‚Äô—è–∑–∫–æ–≤—ñ) ‚Äî —Ç–µ–∂ 1..5
  ratingPay     Int?
  ratingCulture Int?
  ratingBalance Int?    // work-life balance
  ratingClarity Int?    // —è—Å–Ω—ñ—Å—Ç—å —É–º–æ–≤ / –ø—Ä–æ–∑–æ—Ä—ñ—Å—Ç—å

  text          String
  isHidden      Boolean  @default(false)
  createdAt     DateTime @default(now())

  User          User     @relation(fields: [authorId], references: [id])

  // üîí –æ–¥–∏–Ω –≤—ñ–¥–≥—É–∫ –Ω–∞ –æ–¥–Ω—É —Ü—ñ–ª—å –≤—ñ–¥ –æ–¥–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞
  @@unique([authorId, targetType, targetId])
  // –∫–æ—Ä–∏—Å–Ω—ñ —ñ–Ω–¥–µ–∫—Å–∏ –¥–ª—è –≤–∏–±—ñ—Ä–æ–∫
  @@index([targetType, targetId])
  @@index([authorId])
}

model User {
  id                 String    @id
  firebaseUid        String    @unique
  email              String?   @unique
  displayName        String?
  phone              String?   @unique
  photoUrl           String?
  isAdmin            Boolean   @default(false)
  createdAt          DateTime  @default(now())

  // üî¢ –∞–≥—Ä–µ–≥–∞—Ç–∏, –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ—Ü—ñ–Ω—é—é—Ç—å —è–∫ –ø—Ä–∞—Ü—ñ–≤–Ω–∏–∫–∞
  ratingWorkerAvg         Float   @default(0)
  ratingWorkerCount       Int     @default(0)
  ratingWorkerSum         Int     @default(0)
  ratingWorkerBayesScore  Float   @default(0)

  Company            Company[]
  Job                Job[]
  Review             Review[]
}

model ContactMessageLog {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  ip                 String
  userAgent          String?
  name               String
  email              String
  message            String
  messageLen         Int
  spam               Boolean  @default(false)
  rateLimited        Boolean  @default(false)
  success            Boolean  @default(false)
  provider           String?
  providerMessageId  String?
  error              String?
  retryAfterSec      Int?

  // ‚úÖ soft-delete (null = –∞–∫—Ç–∏–≤–Ω–∏–π)
  deletedAt          DateTime?

  @@index([createdAt])
  @@index([ip])
  @@index([deletedAt])
}
